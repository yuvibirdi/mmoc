#+title: Writing my Own Compiler
#+author: YSB
* What I already understand
- A compiler has 2 main parts that is a front-end and a back-end.
- Now, the front end includes, a lexor that parses the actual code written by the user and converts it into some kind of inter-mediatory code.
- Now this inter-mediatory code is used by some kind of framework such as (llvm) or some kind of back-end that I will have to write on my own and that compiles it into x86-64 assembly.
* Learning LLVM
- Following the LLVM Reference Manual at https://llvm.org/docs/LangRef.html#preserving-debug-information-intrinsics
** What is LLVM useful for
- 3 main forms:
  - in-memory compiler IR
  - on-disk bitcode representation (suitable for fast loading by a JIT compiler)
  - or as a Human readable assembly language representation
- This allows LLVM to provide a powerful intermediate representation (LLVM-IR) for efficient compiler transformations and analysis, while providing a natural means to debug and visualize the transformations.
- LLVM can be used as the target of optimizations: for example, through pointer analysis, it can be proven that a C automatic variable is never accessed outside of the current function, allowing it to be promoted to a simple SSA value instead of a memory location.
** Syntax
*** Identifiers
LLVM identiers come in two basic types: global and local. Global identifiers (functions, global variables) begin with the '@' char. Local identifiers (register names, types) begin with the '%' char. Additionally, there are three different formats for identifiers, for different purposes:

1. Named values are represented as a string of characters with a prefix. For example, %foo, @DivisionbyZero, %a.really.long.identifier.
   a) The actual regular expression used is ‘[%@][-a-zA-Z$._][-a-zA-Z$._0-9]*’. Identifiers that require other characters in their names can be surrounded with quotes.
   b) Special characters may be escaped using "\xx" where xx is the ASCII code for the character in hexadecimal.
   c) In this way, any character can be used in a name value, even quotes themselves. The "\01" prefix can be used on global values to suppress mangling.
2. Unnamed values are represented as an unsigned numeric value with their prefix. For example, %12, @2, %44.
3. Constants


Example time
The easy way:
here it's I believe just a multiply constxpr
#+begin_src llvm
%result = mul i32 %X, 8
#+end_src

After Strength Reduction:
here it's a shift left on the %X register by 3 (cause 8 in binary is 111)
#+begin_src llvm
%result = shl i32 %X, 3
#+end_src
"The Hard Way"
successive additions idt this is better than just doing a shift left (and I was correct)
#+begin_src llvm
%0 = add i32 %X, %X  
%1 = add i32 %0, %0 
%result = add i32, %1, %1
#+end_src

comments work with ; till the end of the line and /* */ for everything in between.

*** String Constants
- Strings in LLVM are delimited by " " characters. Within a string, all bytes are treated literally with the exception of the \ charcter, which is the escape sequence and the forst : character, which ends the string.
- Two kinds of escapes:
  1. \\ represents a single \ chracter.
  2. \ followed by two hexaedimal characters (0-9, a-f or A-F) represents the byte with the given value (e.g., x00 represents a null bypte.)
   
- To represent the string " character, use \22. (\" will end the string with a trailing \.)
- Newlines do not terminalte string constants; therefore strings can span multiple lines.

** High Level Structure
*** Module Structure
- LLVM programs are composed of Module's, each of which is a translation unit of the input programs.
- Modules can be combined by using the LLVM linnker which merges function (and global variable) definitons, resolves forward declarations, and merges symbol table entries.
- for example, hello world:
#+begin_src llvm
; Declare the string constant as a global constant.
@.str = private unnamed_addr constant [13 x i8] c"hello world \0A\00"
; External declaration of the puts function
declare i32 @puts(ptr captures(none)) nounwind
; Definition of the main function
define i32 @main(){
  ; Call puts function to write out the string to stdout.
  call i32 @puts(ptr @.str)
  return i32 0
}

; Named metadata
!0 = !{i32 42, null, !"string"}
!foo = !{!0}
#+end_src



** I can Use Lean 4 to Write a parser for my first project 
