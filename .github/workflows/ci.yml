name: Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build & Test (${{ matrix.os }} / ${{ matrix.build_type }})
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        build_type: [Release, Debug]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup CMake
        uses: lukka/get-cmake@latest

      - name: Install dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          # Install basic system packages that setup.sh needs
          sudo apt-get update
          sudo apt-get install -y curl wget openjdk-17-jre-headless

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          # Install basic system packages that setup.sh needs
          brew install openjdk curl

      - name: Cache generated parser
        uses: actions/cache@v4
        with:
          path: generated/
          key: antlr-${{ runner.os }}-${{ hashFiles('grammar/C.g4') }}

      - name: Generate ANTLR parser files and install dependencies
        run: ./setup.sh

      - name: Verify generated files
        run: |
          echo "Checking generated files..."
          ls -la generated/
          echo "Checking for compatibility issues..."
          if grep -r "getTokenNames.*override" generated/ 2>/dev/null; then
            echo "ERROR: Found unpatched getTokenNames override"
            exit 1
          fi
          echo "Generated files look good!"

      - name: Show ANTLR tool version
        run: |
          echo "Checking ANTLR tool version..."
          if command -v antlr4 &> /dev/null; then
            echo "Using antlr4:"
            antlr4 2>&1 | head -1 || echo "antlr4 found but version check failed"
          elif command -v antlr &> /dev/null; then
            echo "Using antlr:"
            antlr 2>&1 | head -1 || echo "antlr found but version check failed"
          else
            echo "No ANTLR tool found"
            exit 1
          fi

      - name: Setup environment (macOS)
        if: runner.os == 'macOS'
        run: echo "$(brew --prefix llvm)/bin" >> $GITHUB_PATH

      - name: Configure CMake
        run: |
          cmake -B build -G Ninja \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DCMAKE_C_COMPILER=clang \
            -DCMAKE_CXX_COMPILER=clang++

      - name: Build
        run: cmake --build build --target all -j

      - name: Run static analysis (cppcheck)
        if: matrix.build_type == 'Debug'
        run: |
          cppcheck --enable=all --error-exitcode=1 \
            --suppress=missingIncludeSystem \
            --suppress=missingInclude \
            --suppress=ignoredReturnValue \
            --suppress=unusedFunction \
            --suppress=unusedVariable \
            --suppress=useStlAlgorithm \
            -I src/ -I generated/ \
            src/


      - name: Python test suite
        run: python3 tests/test_runner.py

      - name: Upload build logs (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ matrix.os }}-${{ matrix.build_type }}
          path: |
            build/CMakeFiles/CMakeOutput.log
            build/CMakeFiles/CMakeError.log

  arch:
    name: Arch Linux Build
    runs-on: ubuntu-latest
    container: archlinux:latest
    steps:
      - uses: actions/checkout@v4

      - name: Generate ANTLR parser files and install dependencies
        run: ./setup.sh

      - name: Configure
        env:
          ANTLR4_INCLUDE: /usr/include/antlr4-runtime
          ANTLR4_LIB: /usr/lib
        run: cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=Release

      - name: Build
        run: cmake --build build --target all -j

      - name: Tests
        run: python tests/test_runner.py
