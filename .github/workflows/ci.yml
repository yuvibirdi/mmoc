name: Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build & Test (${{ matrix.os }} / ${{ matrix.build_type }})
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        build_type: [Release, Debug]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup CMake
        uses: lukka/get-cmake@latest

      - name: Install dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            llvm-17 llvm-17-dev clang-17 lld-17 \
            openjdk-17-jre-headless \
            pkg-config ninja-build cppcheck curl wget
          sudo ln -sf /usr/bin/llvm-config-17 /usr/bin/llvm-config
          sudo ln -sf /usr/bin/clang-17 /usr/bin/clang
          sudo ln -sf /usr/bin/clang++-17 /usr/bin/clang++
          
          # Install ANTLR4 4.13.1 for compatibility
          cd /tmp
          wget https://www.antlr.org/download/antlr-4.13.1-complete.jar
          sudo mkdir -p /usr/local/lib
          sudo mv antlr-4.13.1-complete.jar /usr/local/lib/
          echo '#!/bin/bash' | sudo tee /usr/local/bin/antlr4
          echo 'java -jar /usr/local/lib/antlr-4.13.1-complete.jar "$@"' | sudo tee -a /usr/local/bin/antlr4
          sudo chmod +x /usr/local/bin/antlr4
          
          # Install ANTLR4 C++ runtime 4.13.1
          wget https://github.com/antlr/antlr4/archive/refs/tags/4.13.1.tar.gz
          tar -xzf 4.13.1.tar.gz
          cd antlr4-4.13.1/runtime/Cpp
          mkdir build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          sudo make install
          sudo ldconfig

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install llvm openjdk ninja cppcheck curl pkg-config
          echo "$(brew --prefix llvm)/bin" >> $GITHUB_PATH
          
          # Install ANTLR4 4.13.1 for compatibility
          cd /tmp
          wget https://www.antlr.org/download/antlr-4.13.1-complete.jar
          sudo mkdir -p /usr/local/lib
          sudo mv antlr-4.13.1-complete.jar /usr/local/lib/
          echo '#!/bin/bash' | sudo tee /usr/local/bin/antlr4
          echo 'java -jar /usr/local/lib/antlr-4.13.1-complete.jar "$@"' | sudo tee -a /usr/local/bin/antlr4
          sudo chmod +x /usr/local/bin/antlr4
          
          # Install ANTLR4 C++ runtime 4.13.1
          wget https://github.com/antlr/antlr4/archive/refs/tags/4.13.1.tar.gz
          tar -xzf 4.13.1.tar.gz
          cd antlr4-4.13.1/runtime/Cpp
          mkdir build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(sysctl -n hw.ncpu)
          sudo make install

      - name: Cache generated parser
        uses: actions/cache@v4
        with:
          path: generated/
          key: antlr-${{ hashFiles('grammar/C.g4') }}

      - name: Configure CMake
        run: |
          cmake -B build -G Ninja \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DCMAKE_C_COMPILER=clang \
            -DCMAKE_CXX_COMPILER=clang++

      - name: Build
        run: cmake --build build --target all -j

      - name: Run static analysis (cppcheck)
        if: matrix.build_type == 'Debug'
        run: |
          cppcheck --enable=all --error-exitcode=1 \
            --suppress=missingIncludeSystem \
            --suppress=missingInclude \
            --suppress=ignoredReturnValue \
            --suppress=unusedFunction \
            --suppress=unusedVariable \
            --suppress=useStlAlgorithm \
            -I src/ -I generated/ \
            src/


      - name: Python test suite
        run: python3 tests/test_runner.py

      - name: Upload build logs (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ matrix.os }}-${{ matrix.build_type }}
          path: |
            build/CMakeFiles/CMakeOutput.log
            build/CMakeFiles/CMakeError.log

  arch:
    name: Arch Linux Build
    runs-on: ubuntu-latest
    container: archlinux:latest
    steps:
      - uses: actions/checkout@v4

      - name: Install deps (Arch)
        run: |
          pacman -Sy --noconfirm --needed base-devel llvm clang lld cmake ninja python git cppcheck curl jdk-openjdk antlr4-runtime antlr4

      - name: Configure
        env:
          ANTLR4_INCLUDE: /usr/include/antlr4-runtime
          ANTLR4_LIB: /usr/lib
        run: cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=Release

      - name: Build
        run: cmake --build build --target all -j

      - name: Tests
        run: python tests/test_runner.py
