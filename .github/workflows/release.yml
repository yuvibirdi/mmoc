name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build-release:
    name: Build Release (${{ matrix.name }})
    permissions:
      contents: read
    strategy:
      matrix:
        include:
          - name: "Linux x64"
            os: ubuntu-latest
            asset_name: ccomp-linux-x64
          - name: "macOS Apple Silicon"
            os: macos-latest
            asset_name: ccomp-macos-arm64
    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4

      - name: Setup CMake
        uses: lukka/get-cmake@latest

      - name: Install dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y curl wget openjdk-17-jre-headless

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install openjdk curl

      - name: Cache generated parser
        uses: actions/cache@v4
        with:
          path: generated/
          key: antlr-${{ runner.os }}-${{ hashFiles('grammar/C.g4') }}

      - name: Generate ANTLR parser files and install dependencies
        run: ./setup.sh

      - name: Configure CMake
        run: |
          if [[ "$RUNNER_OS" == "macOS" ]]; then
            export LLVM_DIR="$(brew --prefix llvm)/lib/cmake/llvm"
            cmake -B build -G Ninja \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_C_COMPILER=/usr/bin/clang \
              -DCMAKE_CXX_COMPILER=/usr/bin/clang++ \
              -DCMAKE_CXX_FLAGS="-stdlib=libc++" \
              -DCMAKE_EXE_LINKER_FLAGS="-stdlib=libc++"
          else
            cmake -B build -G Ninja \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_C_COMPILER=clang \
              -DCMAKE_CXX_COMPILER=clang++
          fi

      - name: Build
        run: cmake --build build --target all -j

      - name: Test
        run: python3 tests/test_runner.py

      - name: Strip binary
        run: strip build/ccomp

      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: build/ccomp

  build-arch:
    name: Build Release (Arch Linux)
    runs-on: ubuntu-latest
    container: archlinux:latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Generate ANTLR parser files and install dependencies
        run: ./setup.sh

      - name: Configure CMake
        env:
          ANTLR4_INCLUDE: /usr/include/antlr4-runtime
          ANTLR4_LIB: /usr/lib
        run: cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=Release

      - name: Build
        run: cmake --build build --target all -j

      - name: Test
        run: python3 tests/test_runner.py

      - name: Strip binary
        run: strip build/ccomp

      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: ccomp-arch-x64
          path: build/ccomp

  create-release:
    name: Create Release
    needs: [build-release, build-arch]
    if: always() && (needs.build-release.result == 'success')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: List downloaded artifacts
        run: |
          echo "Downloaded artifacts:"
          ls -la
          find . -name "ccomp" -type f

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          # Copy and rename binaries with proper extensions
          if [ -f ccomp-linux-x64/ccomp ]; then
            cp ccomp-linux-x64/ccomp release-assets/ccomp-linux-x64
            chmod +x release-assets/ccomp-linux-x64
          fi
          if [ -f ccomp-macos-arm64/ccomp ]; then
            cp ccomp-macos-arm64/ccomp release-assets/ccomp-macos-arm64
            chmod +x release-assets/ccomp-macos-arm64
          fi
          if [ -f ccomp-arch-x64/ccomp ]; then
            cp ccomp-arch-x64/ccomp release-assets/ccomp-arch-x64
            chmod +x release-assets/ccomp-arch-x64
          fi
          echo "Release assets prepared:"
          ls -la release-assets/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: MMOC ${{ github.ref_name }}
          prerelease: true
          generate_release_notes: true
          files: release-assets/*